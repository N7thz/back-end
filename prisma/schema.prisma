generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  isActive     Boolean        @default(true) @map("is_active")
  createdAt    DateTime       @default(now()) @map("create_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  imageId      String?        @map("image_id")
  image        Image?         @relation(fields: [imageId], references: [id])
  role         Role           @default(CLIENT)
  userTraining UserTraining[]

  @@map("users")
}

model Image {
  id       String @id @default(uuid())
  imageUrl String @unique @map("image_url")
  fileName String @unique @map("file_name")
  path     String
  fullPath String
  userId   String @map("user_id")
  User     User[]

  @@map("images")
}

model UserTraining {
  id         String   @id @default(uuid())
  userId     String
  trainingId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@unique([userId, trainingId])
  @@map("user_trainings")
}

model Training {
  id               String             @id @default(uuid())
  name             String
  obs              String?
  madeAt           DateTime           @default(now()) @map("made_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map("updated_at")
  exercises        Exercise[]
  UserTraining     UserTraining[]
  ExerciseTraining ExerciseTraining[]

  @@map("trainings")
}

model ExerciseTraining {
  id         String   @id @default(uuid())
  trainingId String
  exerciseId String
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@unique([trainingId, exerciseId])
  @@map("exercise_trainings")
}

model Exercise {
  id               String             @id @default(uuid())
  name             String
  series           Int
  reps             Int
  toFailure        Boolean            @default(false) @map("to_failure")
  trainingId       String?            @map("training_id")
  Training         Training?          @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  ExerciseTraining ExerciseTraining[]

  @@map("exercises")
}

enum Role {
  CLIENT
  ADMIN
}